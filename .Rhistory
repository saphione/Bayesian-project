}
# initial values
init1 <- list(a = rep(1, datahoopoe$nb), b.bare = rep(1, datahoopoe$nb), b.bare_carre = rep(1, datahoopoe$nb), b.height = rep(1, datahoopoe$nb), b.height_carre = rep(1, datahoopoe$nb))
init2 <- list(a = rep(-1, datahoopoe$nb), b.bare = rep(-1, datahoopoe$nb), b.bare_carre = rep(-1, datahoopoe$nb), b.height = rep(-1, datahoopoe$nb), b.height_carre = rep(-1, datahoopoe$nb))
init3 <- list(a = rep(0, datahoopoe$nb), b.bare = rep(0, datahoopoe$nb), b.bare_carre = rep(0, datahoopoe$nb), b.height = rep(0, datahoopoe$nb), b.height_carre = rep(0, datahoopoe$nb))
init4 <- list(a = rep(-2, datahoopoe$nb), b.bare = rep(-2, datahoopoe$nb), b.bare_carre = rep(-2, datahoopoe$nb), b.height = rep(-2, datahoopoe$nb), b.height_carre = rep(-2, datahoopoe$nb))
init5 <- list(a = rep(2, datahoopoe$nb), b.bare = rep(2, datahoopoe$nb), b.bare_carre = rep(2, datahoopoe$nb), b.height = rep(2, datahoopoe$nb), b.height_carre = rep(2, datahoopoe$nb))
init <- list(init1, init2, init3, init4, init5)
# parameters to monitor
params <- c("a", "b.bare", "b.bare_carre", "b.height", "b.height_carre")
# call jags to fit model
partial_pooling_fit <- jags(data = datahoopoe,
inits = init,
parameters.to.save = params,
model.file = logisitic,
n.chains = 5,
n.iter = 30000,
n.burnin = 6000,
n.thin = 1)
partial_pooling_fit
df <- read_csv2("https://raw.githubusercontent.com/oliviergimenez/bayesian-stats-with-R/master/slides/dat/VMG.csv")
df
df$Sp <- as_factor(df$Sp)
df$Vm <- as.numeric(df$Vm)
# read in data, directly from course website
library(readr)
df <- read_csv2("https://raw.githubusercontent.com/oliviergimenez/bayesian-stats-with-R/master/slides/dat/VMG.csv")
df
# use relevant format for columns Sp and Vm
library(forcats)
df$Sp <- as_factor(df$Sp)
df$Vm <- as.numeric(df$Vm)
# define numeric vector of species
species <- as.numeric(df$Sp)
# define response variable, number of seeds
y <- log(df$NGrTotest)
# standardize explanatory variable, biomass
x <- (df$Vm - mean(df$Vm))/sd(df$Vm)
df$Sp
species
ring
length(levels(hoopoe$ring))
length(levels(df$Sp))
length(unique(ring))
hoopoe <- sort(hoopoe$ring)
hoopoe
ringtest <- unique(hoopoe$ring)
seq <- c(1:length(ringtest))
ring <- c()
for (i in 1:length(hoopoe$y)){
for (j in 1:length(ringtest)){
if(hoopoe$ring[i] == ringtest[j]){ ring <- c(ring, seq[j]) }
else{next}
}
}
hoopoe$ring <- sort(hoopoe$ring)
hoopoe <- read_delim("C:/Users/Saphione/OneDrive/Fac/M2/Cours/Bayésien/Projet/projet1/hoopoe.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)
hoopoe <- hoopoe[,c(1:3,5:7)]
hoopoe$ring <- sort(hoopoe$ring)
View(hoopoe)
# %bareground
x_bg <- hoopoe$bare
hoopoe$x_bg_carr <- (hoopoe$bare)^2
hoopoe$x_vh_carr <- (hoopoe$heightC)^2
#x_bg <- (hoopoe$bare - mean(hoopoe$bare))/sd(hoopoe$bare)
# vegetation height
x_vh <- hoopoe$heightC
ringtest <- unique(hoopoe$ring)
seq <- c(1:length(ringtest))
ring <- c()
for (i in 1:length(hoopoe$y)){
for (j in 1:length(ringtest)){
if(hoopoe$ring[i] == ringtest[j]){ ring <- c(ring, seq[j]) }
else{next}
}
}
datahoopoe <- list(
N = length(hoopoe$y),
bare = as.numeric(scale(hoopoe$bare)),
bare_carre = as.numeric(scale(hoopoe$x_bg_carr)),
height = as.numeric(scale(hoopoe$heightC)),
height_carre = as.numeric(scale(hoopoe$x_vh_carr)),
y = ifelse(hoopoe$y == "random", 0, 1),
ring = ring,
nb = length(unique(ring))
)
ring
logisitic <- function(){
for(i in 1:N){
y[i] ~ dbin(p[i],1) # binomial likelihood
logit(p[i]) <- a[ring[i]]
# + b.bare[ring[i]] * bare[i] + b.bare_carre[ring[i]] * bare_carre[i] + b.height[ring[i]] * height[i] + b.height_carre[ring[i]] * height_carre[i]
}
for (j in 1:nb){
a[j] ~ dnorm(mua,vara)
# b.bare[j] ~ dnorm(mubare,varbare)
#b.bare_carre[j] ~ dnorm(mubarec,varbarec)
#b.height[j] ~ dnorm(muheight,varheight)
#b.height_carre[j] ~ dnorm(muheightc,varheightc)
}
mua ~ dnorm(0,0.001)
#mubare ~ dnorm(0,0.001)
#mubarec ~ dnorm(0,0.001)
#muheight ~ dnorm(0,0.001)
#muheightc ~ dnorm(0,0.001)
vara ~ dunif(0,100)
#varbare ~ dunif(0,001)
#varheight ~ dunif(0,001)
#varbarec ~ dunif(0,001)
#varheightc ~ dunif(0,001)
}
# initial values
init1 <- list(a = rep(1, datahoopoe$nb), b.bare = rep(1, datahoopoe$nb), b.bare_carre = rep(1, datahoopoe$nb), b.height = rep(1, datahoopoe$nb), b.height_carre = rep(1, datahoopoe$nb))
init2 <- list(a = rep(-1, datahoopoe$nb), b.bare = rep(-1, datahoopoe$nb), b.bare_carre = rep(-1, datahoopoe$nb), b.height = rep(-1, datahoopoe$nb), b.height_carre = rep(-1, datahoopoe$nb))
init3 <- list(a = rep(0, datahoopoe$nb), b.bare = rep(0, datahoopoe$nb), b.bare_carre = rep(0, datahoopoe$nb), b.height = rep(0, datahoopoe$nb), b.height_carre = rep(0, datahoopoe$nb))
init4 <- list(a = rep(-2, datahoopoe$nb), b.bare = rep(-2, datahoopoe$nb), b.bare_carre = rep(-2, datahoopoe$nb), b.height = rep(-2, datahoopoe$nb), b.height_carre = rep(-2, datahoopoe$nb))
init5 <- list(a = rep(2, datahoopoe$nb), b.bare = rep(2, datahoopoe$nb), b.bare_carre = rep(2, datahoopoe$nb), b.height = rep(2, datahoopoe$nb), b.height_carre = rep(2, datahoopoe$nb))
init <- list(init1, init2, init3, init4, init5)
# parameters to monitor
params <- c("a", "b.bare", "b.bare_carre", "b.height", "b.height_carre")
# call jags to fit model
partial_pooling_fit <- jags(data = datahoopoe,
inits = init,
parameters.to.save = params,
model.file = logisitic,
n.chains = 5,
n.iter = 30000,
n.burnin = 6000,
n.thin = 1)
partial_pooling_fit
par(mfrow = c(1, 2))
hist(partial_pooling_fit$BUGSoutput$sims.matrix)
plot(density(partial_pooling_fit$BUGSoutput$sims.matrix))
hoopoe <- read_delim("C:/Users/Saphione/OneDrive/Fac/M2/Cours/Bayésien/Projet/projet1/hoopoe.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)
hoopoe <- hoopoe[,c(1:3,5:7)]
# %bareground
x_bg <- hoopoe$bare
hoopoe$x_bg_carr <- (hoopoe$bare)^2
# vegetation height
x_vh <- hoopoe$heightC
hoopoe$x_vh_carr <- (hoopoe$heightC)^2
ringtest <- unique(hoopoe$ring)
seq <- c(1:length(ringtest))
ring <- c()
for (i in 1:length(hoopoe$y)){
for (j in 1:length(ringtest)){
if(hoopoe$ring[i] == ringtest[j]){ ring <- c(ring, seq[j]) }
else{next}
}
}
datahoopoe <- list(
N = length(hoopoe$y),
bare = as.numeric(scale(hoopoe$bare)),
bare_carre = as.numeric(scale(hoopoe$x_bg_carr)),
height = as.numeric(scale(hoopoe$heightC)),
height_carre = as.numeric(scale(hoopoe$x_vh_carr)),
y = ifelse(hoopoe$y == "random", 0, 1),
ring = ring,
nb = length(unique(ring))
)
logisitic <- function(){
for(i in 1:N){
y[i] ~ dbin(p[i],1) # binomial likelihood
logit(p[i]) <- a[ring[i]]
# + b.bare[ring[i]] * bare[i] + b.bare_carre[ring[i]] * bare_carre[i] + b.height[ring[i]] * height[i] + b.height_carre[ring[i]] * height_carre[i]
}
for (j in 1:nb){
a[j] ~ dnorm(mua,vara)
# b.bare[j] ~ dnorm(mubare,varbare)
#b.bare_carre[j] ~ dnorm(mubarec,varbarec)
#b.height[j] ~ dnorm(muheight,varheight)
#b.height_carre[j] ~ dnorm(muheightc,varheightc)
}
mua ~ dnorm(0,0.001)
#mubare ~ dnorm(0,0.001)
#mubarec ~ dnorm(0,0.001)
#muheight ~ dnorm(0,0.001)
#muheightc ~ dnorm(0,0.001)
vara ~ dunif(0,100)
#varbare ~ dunif(0,100)
#varheight ~ dunif(0,100)
#varbarec ~ dunif(0,100)
#varheightc ~ dunif(0,100)
}
# initial values
init1 <- list(a = rep(1, datahoopoe$nb), b.bare = rep(1, datahoopoe$nb), b.bare_carre = rep(1, datahoopoe$nb), b.height = rep(1, datahoopoe$nb), b.height_carre = rep(1, datahoopoe$nb))
init2 <- list(a = rep(-1, datahoopoe$nb), b.bare = rep(-1, datahoopoe$nb), b.bare_carre = rep(-1, datahoopoe$nb), b.height = rep(-1, datahoopoe$nb), b.height_carre = rep(-1, datahoopoe$nb))
init3 <- list(a = rep(0, datahoopoe$nb), b.bare = rep(0, datahoopoe$nb), b.bare_carre = rep(0, datahoopoe$nb), b.height = rep(0, datahoopoe$nb), b.height_carre = rep(0, datahoopoe$nb))
init4 <- list(a = rep(-2, datahoopoe$nb), b.bare = rep(-2, datahoopoe$nb), b.bare_carre = rep(-2, datahoopoe$nb), b.height = rep(-2, datahoopoe$nb), b.height_carre = rep(-2, datahoopoe$nb))
init5 <- list(a = rep(2, datahoopoe$nb), b.bare = rep(2, datahoopoe$nb), b.bare_carre = rep(2, datahoopoe$nb), b.height = rep(2, datahoopoe$nb), b.height_carre = rep(2, datahoopoe$nb))
init <- list(init1, init2, init3, init4, init5)
# parameters to monitor
params <- c("a", "b.bare", "b.bare_carre", "b.height", "b.height_carre")
# call jags to fit model
partial_pooling_fit <- jags(data = datahoopoe,
inits = init,
parameters.to.save = params,
model.file = logisitic,
n.chains = 5,
n.iter = 30000,
n.burnin = 6000,
n.thin = 1)
partial_pooling_fit
par(mfrow = c(1, 2))
hist(partial_pooling_fit$BUGSoutput$sims.matrix)
plot(density(partial_pooling_fit$BUGSoutput$sims.matrix))
partial_pooling_fit
datahoopoe <- list(
N = length(hoopoe$y),
bare = as.numeric(scale(hoopoe$bare)),
bare_carre = as.numeric(scale(hoopoe$x_bg_carr)),
height = as.numeric(scale(hoopoe$heightC)),
height_carre = as.numeric(scale(hoopoe$x_vh_carr)),
y = ifelse(hoopoe$y == "random", 0, 1),
#ring = ring,
ring = as.numeric(hoopoe$ring),
nb = length(unique(ring))
)
ring
logisitic <- function(){
for(i in 1:N){
y[i] ~ dbin(p[i],1) # binomial likelihood
logit(p[i]) <- a[ring[i]]
# + b.bare[ring[i]] * bare[i] + b.bare_carre[ring[i]] * bare_carre[i] + b.height[ring[i]] * height[i] + b.height_carre[ring[i]] * height_carre[i]
}
for (j in 1:nb){
a[j] ~ dnorm(mua,vara)
# b.bare[j] ~ dnorm(mubare,varbare)
#b.bare_carre[j] ~ dnorm(mubarec,varbarec)
#b.height[j] ~ dnorm(muheight,varheight)
#b.height_carre[j] ~ dnorm(muheightc,varheightc)
}
mua ~ dnorm(0,0.001)
#mubare ~ dnorm(0,0.001)
#mubarec ~ dnorm(0,0.001)
#muheight ~ dnorm(0,0.001)
#muheightc ~ dnorm(0,0.001)
vara ~ dunif(0,100)
#varbare ~ dunif(0,100)
#varheight ~ dunif(0,100)
#varbarec ~ dunif(0,100)
#varheightc ~ dunif(0,100)
}
# initial values
init1 <- list(a = rep(1, datahoopoe$nb), b.bare = rep(1, datahoopoe$nb), b.bare_carre = rep(1, datahoopoe$nb), b.height = rep(1, datahoopoe$nb), b.height_carre = rep(1, datahoopoe$nb))
init2 <- list(a = rep(-1, datahoopoe$nb), b.bare = rep(-1, datahoopoe$nb), b.bare_carre = rep(-1, datahoopoe$nb), b.height = rep(-1, datahoopoe$nb), b.height_carre = rep(-1, datahoopoe$nb))
init3 <- list(a = rep(0, datahoopoe$nb), b.bare = rep(0, datahoopoe$nb), b.bare_carre = rep(0, datahoopoe$nb), b.height = rep(0, datahoopoe$nb), b.height_carre = rep(0, datahoopoe$nb))
init4 <- list(a = rep(-2, datahoopoe$nb), b.bare = rep(-2, datahoopoe$nb), b.bare_carre = rep(-2, datahoopoe$nb), b.height = rep(-2, datahoopoe$nb), b.height_carre = rep(-2, datahoopoe$nb))
init5 <- list(a = rep(2, datahoopoe$nb), b.bare = rep(2, datahoopoe$nb), b.bare_carre = rep(2, datahoopoe$nb), b.height = rep(2, datahoopoe$nb), b.height_carre = rep(2, datahoopoe$nb))
init <- list(init1, init2, init3, init4, init5)
# parameters to monitor
params <- c("a", "b.bare", "b.bare_carre", "b.height", "b.height_carre")
# call jags to fit model
partial_pooling_fit <- jags(data = datahoopoe,
inits = init,
parameters.to.save = params,
model.file = logisitic,
n.chains = 5,
n.iter = 30000,
n.burnin = 6000,
n.thin = 1)
hoopoe <- read_delim("C:/Users/Saphione/OneDrive/Fac/M2/Cours/Bayésien/Projet/projet1/hoopoe.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)
hoopoe <- hoopoe[,c(1:3,5:7)]
ringtest <- unique(hoopoe$ring)
seq <- c(1:length(ringtest))
ring <- c()
for (i in 1:length(hoopoe$y)){
for (j in 1:length(ringtest)){
if(hoopoe$ring[i] == ringtest[j]){ ring <- c(ring, seq[j]) }
else{next}
}
}
ring
as.numeric(hoopoe$ring)
hoopoe$ring
df$Sp
View(df)
hoopoe$ring <- as.factor(hoopoe$ring)
View(hoopoe)
# %bareground
x_bg <- hoopoe$bare
hoopoe$x_bg_carr <- (hoopoe$bare)^2
# vegetation height
x_vh <- hoopoe$heightC
hoopoe$x_vh_carr <- (hoopoe$heightC)^2
datahoopoe <- list(
N = length(hoopoe$y),
bare = as.numeric(scale(hoopoe$bare)),
bare_carre = as.numeric(scale(hoopoe$x_bg_carr)),
height = as.numeric(scale(hoopoe$heightC)),
height_carre = as.numeric(scale(hoopoe$x_vh_carr)),
y = ifelse(hoopoe$y == "random", 0, 1),
#ring = ring,
ring = as.numeric(hoopoe$ring),
nb = length(unique(ring))
)
ring
logisitic <- function(){
for(i in 1:N){
y[i] ~ dbin(p[i],1) # binomial likelihood
logit(p[i]) <- a[ring[i]]
# + b.bare[ring[i]] * bare[i] + b.bare_carre[ring[i]] * bare_carre[i] + b.height[ring[i]] * height[i] + b.height_carre[ring[i]] * height_carre[i]
}
for (j in 1:nb){
a[j] ~ dnorm(mua,vara)
# b.bare[j] ~ dnorm(mubare,varbare)
#b.bare_carre[j] ~ dnorm(mubarec,varbarec)
#b.height[j] ~ dnorm(muheight,varheight)
#b.height_carre[j] ~ dnorm(muheightc,varheightc)
}
mua ~ dnorm(0,0.001)
#mubare ~ dnorm(0,0.001)
#mubarec ~ dnorm(0,0.001)
#muheight ~ dnorm(0,0.001)
#muheightc ~ dnorm(0,0.001)
vara ~ dunif(0,100)
#varbare ~ dunif(0,100)
#varheight ~ dunif(0,100)
#varbarec ~ dunif(0,100)
#varheightc ~ dunif(0,100)
}
# initial values
init1 <- list(a = rep(1, datahoopoe$nb), b.bare = rep(1, datahoopoe$nb), b.bare_carre = rep(1, datahoopoe$nb), b.height = rep(1, datahoopoe$nb), b.height_carre = rep(1, datahoopoe$nb))
init2 <- list(a = rep(-1, datahoopoe$nb), b.bare = rep(-1, datahoopoe$nb), b.bare_carre = rep(-1, datahoopoe$nb), b.height = rep(-1, datahoopoe$nb), b.height_carre = rep(-1, datahoopoe$nb))
init3 <- list(a = rep(0, datahoopoe$nb), b.bare = rep(0, datahoopoe$nb), b.bare_carre = rep(0, datahoopoe$nb), b.height = rep(0, datahoopoe$nb), b.height_carre = rep(0, datahoopoe$nb))
init4 <- list(a = rep(-2, datahoopoe$nb), b.bare = rep(-2, datahoopoe$nb), b.bare_carre = rep(-2, datahoopoe$nb), b.height = rep(-2, datahoopoe$nb), b.height_carre = rep(-2, datahoopoe$nb))
init5 <- list(a = rep(2, datahoopoe$nb), b.bare = rep(2, datahoopoe$nb), b.bare_carre = rep(2, datahoopoe$nb), b.height = rep(2, datahoopoe$nb), b.height_carre = rep(2, datahoopoe$nb))
init <- list(init1, init2, init3, init4, init5)
# parameters to monitor
params <- c("a", "b.bare", "b.bare_carre", "b.height", "b.height_carre")
# call jags to fit model
partial_pooling_fit <- jags(data = datahoopoe,
inits = init,
parameters.to.save = params,
model.file = logisitic,
n.chains = 5,
n.iter = 30000,
n.burnin = 6000,
n.thin = 1)
partial_pooling_fit
par(mfrow = c(1, 2))
hist(partial_pooling_fit$BUGSoutput$sims.matrix)
plot(density(partial_pooling_fit$BUGSoutput$sims.matrix))
partial_pooling_fit
# call jags to fit model
partial_pooling_fit <- jags(data = datahoopoe,
inits = init,
parameters.to.save = params,
model.file = logisitic,
n.chains = 5,
n.iter = 50000,
n.burnin = 10000,
n.thin = 1)
hoopoe$x_bg_carr
# %bareground
x_bg <- hoopoe$bare
hoopoe$x_bg_carr <- (x_bg)^2
# vegetation height
x_vh <- hoopoe$heightC
hoopoe$x_vh_carr <- (x_vh)^2
partial_pooling_fit
# parameters to monitor , "b.bare", "b.bare_carre", "b.height", "b.height_carre"
params <- c("a")
# call jags to fit model
partial_pooling_fit <- jags(data = datahoopoe,
inits = init,
parameters.to.save = params,
model.file = logisitic,
n.chains = 5,
n.iter = 50000,
n.burnin = 10000,
n.thin = 1)
partial_pooling_fit
datahoopoe <- list(
N = length(hoopoe$y),
y = ifelse(hoopoe$y == "random", 0, 1),
ring = as.numeric(hoopoe$ring),
nb = length(levels(df$Sp)),
bare = as.numeric(scale(hoopoe$bare)),
bare_carre = as.numeric(scale(hoopoe$x_bg_carr)),
height = as.numeric(scale(hoopoe$heightC)),
height_carre = as.numeric(scale(hoopoe$x_vh_carr))
)
logisitic <- function(){
for(i in 1:N){
y[i] ~ dbin(p[i],1) # binomial likelihood
logit(p[i]) <- a[ring[i]]
# + b.bare[ring[i]] * bare[i] + b.bare_carre[ring[i]] * bare_carre[i] + b.height[ring[i]] * height[i] + b.height_carre[ring[i]] * height_carre[i]
}
for (j in 1:nb){
a[j] ~ dnorm(mua,vara)
# b.bare[j] ~ dnorm(mubare,varbare)
#b.bare_carre[j] ~ dnorm(mubarec,varbarec)
#b.height[j] ~ dnorm(muheight,varheight)
#b.height_carre[j] ~ dnorm(muheightc,varheightc)
}
mua ~ dnorm(0,0.001)
#mubare ~ dnorm(0,0.001)
#mubarec ~ dnorm(0,0.001)
#muheight ~ dnorm(0,0.001)
#muheightc ~ dnorm(0,0.001)
vara ~ dunif(0,100)
#varbare ~ dunif(0,100)
#varheight ~ dunif(0,100)
#varbarec ~ dunif(0,100)
#varheightc ~ dunif(0,100)
}
# initial values
init1 <- list(a = rep(1, datahoopoe$nb), b.bare = rep(1, datahoopoe$nb), b.bare_carre = rep(1, datahoopoe$nb), b.height = rep(1, datahoopoe$nb), b.height_carre = rep(1, datahoopoe$nb))
init2 <- list(a = rep(-1, datahoopoe$nb), b.bare = rep(-1, datahoopoe$nb), b.bare_carre = rep(-1, datahoopoe$nb), b.height = rep(-1, datahoopoe$nb), b.height_carre = rep(-1, datahoopoe$nb))
init4 <- list(a = rep(-2, datahoopoe$nb), b.bare = rep(-2, datahoopoe$nb), b.bare_carre = rep(-2, datahoopoe$nb), b.height = rep(-2, datahoopoe$nb), b.height_carre = rep(-2, datahoopoe$nb))
init <- list(init1, init2, init3, init4, init5)
# parameters to monitor , "b.bare", "b.bare_carre", "b.height", "b.height_carre"
params <- c("a")
# call jags to fit model
partial_pooling_fit <- jags(data = datahoopoe,
inits = init,
parameters.to.save = params,
model.file = logisitic,
n.chains = 5,
n.iter = 50000,
n.burnin = 10000,
n.thin = 1)
datahoopoe <- list(
N = length(hoopoe$y),
y = ifelse(hoopoe$y == "random", 0, 1),
ring = as.numeric(hoopoe$ring),
nb = length(levels(hoopoe$ring)),
bare = as.numeric(scale(hoopoe$bare)),
bare_carre = as.numeric(scale(hoopoe$x_bg_carr)),
height = as.numeric(scale(hoopoe$heightC)),
height_carre = as.numeric(scale(hoopoe$x_vh_carr))
)
# call jags to fit model
partial_pooling_fit <- jags(data = datahoopoe,
inits = init,
parameters.to.save = params,
model.file = logisitic,
n.chains = 5,
n.iter = 50000,
n.burnin = 10000,
n.thin = 1)
View(hoopoe)
View(datahoopoe)
datahoopoe[["ring"]]
View(hoopoe)
hoopoe <- read_delim("C:/Users/Saphione/OneDrive/Fac/M2/Cours/Bayésien/Projet/projet1/hoopoe.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)
hoopoe <- hoopoe[,c(1:3,5:7)]
hoopoe$ring <- as.factor(hoopoe$ring)
# %bareground
x_bg <- hoopoe$bare
hoopoe$x_bg_carr <- (x_bg)^2
# vegetation height
x_vh <- hoopoe$heightC
hoopoe$x_vh_carr <- (x_vh)^2
datahoopoe <- list(
N = length(hoopoe$y),
y = ifelse(hoopoe$y == "random", 0, 1),
ring = as.numeric(hoopoe$ring),
nb = length(levels(hoopoe$ring)),
bare = as.numeric(scale(hoopoe$bare)),
bare_carre = as.numeric(scale(hoopoe$x_bg_carr)),
height = as.numeric(scale(hoopoe$heightC)),
height_carre = as.numeric(scale(hoopoe$x_vh_carr))
)
logisitic <- function(){
for(i in 1:N){
y[i] ~ dbin(p[i],1) # binomial likelihood
logit(p[i]) <- a[ring[i]]
# + b.bare[ring[i]] * bare[i] + b.bare_carre[ring[i]] * bare_carre[i] + b.height[ring[i]] * height[i] + b.height_carre[ring[i]] * height_carre[i]
}
for (j in 1:nb){
a[j] ~ dnorm(mua,vara)
# b.bare[j] ~ dnorm(mubare,varbare)
#b.bare_carre[j] ~ dnorm(mubarec,varbarec)
#b.height[j] ~ dnorm(muheight,varheight)
#b.height_carre[j] ~ dnorm(muheightc,varheightc)
}
mua ~ dnorm(0,0.001)
#mubare ~ dnorm(0,0.001)
#mubarec ~ dnorm(0,0.001)
#muheight ~ dnorm(0,0.001)
#muheightc ~ dnorm(0,0.001)
vara ~ dunif(0,100)
#varbare ~ dunif(0,100)
#varheight ~ dunif(0,100)
#varbarec ~ dunif(0,100)
#varheightc ~ dunif(0,100)
}
# initial values
init1 <- list(a = rep(1, datahoopoe$nb), b.bare = rep(1, datahoopoe$nb), b.bare_carre = rep(1, datahoopoe$nb), b.height = rep(1, datahoopoe$nb), b.height_carre = rep(1, datahoopoe$nb))
init2 <- list(a = rep(-1, datahoopoe$nb), b.bare = rep(-1, datahoopoe$nb), b.bare_carre = rep(-1, datahoopoe$nb), b.height = rep(-1, datahoopoe$nb), b.height_carre = rep(-1, datahoopoe$nb))
init3 <- list(a = rep(0, datahoopoe$nb), b.bare = rep(0, datahoopoe$nb), b.bare_carre = rep(0, datahoopoe$nb), b.height = rep(0, datahoopoe$nb), b.height_carre = rep(0, datahoopoe$nb))
init4 <- list(a = rep(-2, datahoopoe$nb), b.bare = rep(-2, datahoopoe$nb), b.bare_carre = rep(-2, datahoopoe$nb), b.height = rep(-2, datahoopoe$nb), b.height_carre = rep(-2, datahoopoe$nb))
init5 <- list(a = rep(2, datahoopoe$nb), b.bare = rep(2, datahoopoe$nb), b.bare_carre = rep(2, datahoopoe$nb), b.height = rep(2, datahoopoe$nb), b.height_carre = rep(2, datahoopoe$nb))
init <- list(init1, init2, init3, init4, init5)
# parameters to monitor , "b.bare", "b.bare_carre", "b.height", "b.height_carre"
params <- c("a")
# call jags to fit model
partial_pooling_fit <- jags(data = datahoopoe,
inits = init,
parameters.to.save = params,
model.file = logisitic,
n.chains = 5,
n.iter = 50000,
n.burnin = 10000,
n.thin = 1)
partial_pooling_fit
par(mfrow = c(1, 2))
hist(partial_pooling_fit$BUGSoutput$sims.matrix)
plot(density(partial_pooling_fit$BUGSoutput$sims.matrix))
traceplot(partial_pooling_fit)
